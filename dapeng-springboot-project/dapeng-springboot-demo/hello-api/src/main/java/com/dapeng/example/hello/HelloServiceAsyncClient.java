package com.dapeng.example.hello;

      import com.github.dapeng.core.*;
      import com.github.dapeng.org.apache.thrift.*;
      import java.util.concurrent.CompletableFuture;
      import java.util.concurrent.Future;
      import java.util.ServiceLoader;
      import com.dapeng.example.hello.HelloServiceAsyncCodec.*;
      import com.dapeng.example.hello.HelloServiceSuperCodec.*;
      import com.dapeng.example.hello.service.HelloServiceAsync;

      /**
       * Autogenerated by Dapeng-Code-Generator (2.1.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

      **/
      public class HelloServiceAsyncClient implements HelloServiceAsync{
      private final String serviceName;
      private final String version;

      private SoaConnectionPool pool;
      private final SoaConnectionPool.ClientInfo clientInfo;

      public HelloServiceAsyncClient() {
        this.serviceName = "com.dapeng.example.hello.service.HelloService";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      public HelloServiceAsyncClient(String serviceVersion) {
        this.serviceName = "com.dapeng.example.hello.service.HelloService";
        this.version = serviceVersion;

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      
          
            /**
            * 

# sayHello
## 业务描述
    sayHello
## 接口依赖
    无
## 边界异常说明
    无
## 输入
    hello
## 前置检查
    无
## 权限检查
    无
## 逻辑处理
    sayHello
## 数据库变更
    无
## 事务处理
    无
## 输出
    string
## 事件
    无

            **/
            
              public CompletableFuture<String> sayHello(String name) throws SoaException{

              String methodName = "sayHello";
              sayHello_args sayHello_args = new sayHello_args();
              sayHello_args.setName(name);
                

              CompletableFuture<sayHello_result> response = (CompletableFuture<sayHello_result>) pool.sendAsync(serviceName,version,"sayHello",sayHello_args, new SayHello_argsSerializer(), new SayHello_resultSerializer());

              
                  
                      return response.thenApply((sayHello_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

# sayHello
## 业务描述
    sayHello
## 接口依赖
    无
## 边界异常说明
    无
## 输入
    hello
## 前置检查
    无
## 权限检查
    无
## 逻辑处理
    sayHello
## 数据库变更
    无
## 事务处理
    无
## 输出
    string
## 事件
    无

            **/
            
              public CompletableFuture<String> sayHello2(com.dapeng.example.hello.domain.Hello hello) throws SoaException{

              String methodName = "sayHello2";
              sayHello2_args sayHello2_args = new sayHello2_args();
              sayHello2_args.setHello(hello);
                

              CompletableFuture<sayHello2_result> response = (CompletableFuture<sayHello2_result>) pool.sendAsync(serviceName,version,"sayHello2",sayHello2_args, new SayHello2_argsSerializer(), new SayHello2_resultSerializer());

              
                  
                      return response.thenApply((sayHello2_result result )->  result.getSuccess());
                    
                
            }
            
          

        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
        getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
        getServiceMetadata_result response = pool.send(serviceName,version,methodName,getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
        return response.getSuccess();
      }

      /**
      * echo
      **/
      public String echo() throws SoaException {
        String methodName = "echo";
        echo_args echo_args = new echo_args();
        echo_result response = pool.send(serviceName,version,methodName,echo_args, new echo_argsSerializer(), new echo_resultSerializer());
        return response.getSuccess();
      }
    }
    