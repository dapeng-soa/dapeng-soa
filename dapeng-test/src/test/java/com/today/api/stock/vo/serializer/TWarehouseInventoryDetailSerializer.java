 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock.vo.serializer;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class TWarehouseInventoryDetailSerializer implements BeanSerializer<com.today.api.stock.vo.TWarehouseInventoryDetail>{
        
      @Override
      public com.today.api.stock.vo.TWarehouseInventoryDetail read(TProtocol iprot) throws TException{

      com.today.api.stock.vo.TWarehouseInventoryDetail bean = new com.today.api.stock.vo.TWarehouseInventoryDetail();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setWarehouseNo(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setWarehouseName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setWarehouseInventoryNo(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setInventoryStockDate(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setInventoryDate(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.StockFinanceTypeEnum elem0 = com.today.api.stock.enums.StockFinanceTypeEnum.findByValue(iprot.readI32());
       bean.setNORMAL_SKU(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setWmsSkuNo(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuNo(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuName(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setBuyingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setInventoryStock(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setInventoryStockAmout(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setWmsBarcode(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setStatus(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 16:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setCreatedAt(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 17:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setCreatedBy(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 18:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setUpdatedAt(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 19:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setUpdatedBy(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today.api.stock.vo.TWarehouseInventoryDetail bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("TWarehouseInventoryDetail"));

      
            oprot.writeFieldBegin(new TField("id", TType.I64, (short) 1));
            Long elem0 = bean.getId();
            oprot.writeI64(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("warehouseNo", TType.STRING, (short) 2));
            String elem1 = bean.getWarehouseNo();
            oprot.writeString(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("warehouseName", TType.STRING, (short) 3));
            String elem2 = bean.getWarehouseName();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("warehouseInventoryNo", TType.STRING, (short) 4));
            String elem3 = bean.getWarehouseInventoryNo();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("inventoryStockDate", TType.I64, (short) 5));
            Long elem4 = bean.getInventoryStockDate();
            oprot.writeI64(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("inventoryDate", TType.I64, (short) 6));
            Long elem5 = bean.getInventoryDate();
            oprot.writeI64(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("NORMAL_SKU", TType.I32, (short) 7));
            com.today.api.stock.enums.StockFinanceTypeEnum elem6 = bean.getNORMAL_SKU();
            oprot.writeI32(elem6.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("wmsSkuNo", TType.STRING, (short) 8));
            String elem7 = bean.getWmsSkuNo();
            oprot.writeString(elem7);
            
            oprot.writeFieldEnd();
          if(bean.getSkuNo().isPresent()){
              oprot.writeFieldBegin(new TField("skuNo", TType.STRING, (short) 9));
              String elem8 = bean.getSkuNo().get();
              oprot.writeString(elem8);
              
            }
            if(bean.getSkuName().isPresent()){
              oprot.writeFieldBegin(new TField("skuName", TType.STRING, (short) 10));
              String elem9 = bean.getSkuName().get();
              oprot.writeString(elem9);
              
            }
            if(bean.getBuyingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("buyingPrice", TType.DOUBLE, (short) 11));
              Double elem10 = bean.getBuyingPrice().get();
              oprot.writeDouble(elem10);
              
            }
            if(bean.getInventoryStock().isPresent()){
              oprot.writeFieldBegin(new TField("inventoryStock", TType.I32, (short) 12));
              Integer elem11 = bean.getInventoryStock().get();
              oprot.writeI32(elem11);
              
            }
            if(bean.getInventoryStockAmout().isPresent()){
              oprot.writeFieldBegin(new TField("inventoryStockAmout", TType.DOUBLE, (short) 13));
              Double elem12 = bean.getInventoryStockAmout().get();
              oprot.writeDouble(elem12);
              
            }
            
            oprot.writeFieldBegin(new TField("wmsBarcode", TType.STRING, (short) 14));
            String elem13 = bean.getWmsBarcode();
            oprot.writeString(elem13);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("status", TType.I32, (short) 15));
            Integer elem14 = bean.getStatus();
            oprot.writeI32(elem14);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("createdAt", TType.I64, (short) 16));
            Long elem15 = bean.getCreatedAt();
            oprot.writeI64(elem15);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("createdBy", TType.I32, (short) 17));
            Integer elem16 = bean.getCreatedBy();
            oprot.writeI32(elem16);
            
            oprot.writeFieldEnd();
          if(bean.getUpdatedAt().isPresent()){
              oprot.writeFieldBegin(new TField("updatedAt", TType.I64, (short) 18));
              Long elem17 = bean.getUpdatedAt().get();
              oprot.writeI64(elem17);
              
            }
            if(bean.getUpdatedBy().isPresent()){
              oprot.writeFieldBegin(new TField("updatedBy", TType.I32, (short) 19));
              Integer elem18 = bean.getUpdatedBy().get();
              oprot.writeI32(elem18);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today.api.stock.vo.TWarehouseInventoryDetail bean) throws TException{
      
              if(bean.getWarehouseNo() == null)
              throw new SoaException(SoaCode.StructFieldNull, "warehouseNo字段不允许为空");
            
              if(bean.getWarehouseName() == null)
              throw new SoaException(SoaCode.StructFieldNull, "warehouseName字段不允许为空");
            
              if(bean.getWarehouseInventoryNo() == null)
              throw new SoaException(SoaCode.StructFieldNull, "warehouseInventoryNo字段不允许为空");
            
              if(bean.getNORMAL_SKU() == null)
              throw new SoaException(SoaCode.StructFieldNull, "NORMAL_SKU字段不允许为空");
            
              if(bean.getWmsSkuNo() == null)
              throw new SoaException(SoaCode.StructFieldNull, "wmsSkuNo字段不允许为空");
            
              if(bean.getWmsBarcode() == null)
              throw new SoaException(SoaCode.StructFieldNull, "wmsBarcode字段不允许为空");
            
    }
    
        @Override
        public String toString(com.today.api.stock.vo.TWarehouseInventoryDetail bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      