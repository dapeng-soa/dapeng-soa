
      /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock.service;

      import com.github.dapeng.core.Processor;
      import com.github.dapeng.core.Service;
      import com.github.dapeng.core.SoaGlobalTransactional;

      /**
       * Autogenerated by Dapeng-Code-Generator (2.2.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

      * 
      **/
      @com.github.dapeng.core.CustomConfig()
      @Service(name="com.today.api.stock.service.StockService2",version = "1.0.0")
      @Processor(className = "com.today.api.stock.StockService2Codec$Processor")
      public interface StockService2 {
      
          /**
          * 

# 实时库存处理接口
## 业务描述
	处理实时库存
## 接口依赖
	无
## 边界异常说明
	无
## 输入
	1. list<stock_request.AtomProcessStockItem> 库存处理请求头
## 前置检查
	1. 一次最多处理1000个 sku 的库存, 如果超过1000个sku 请下游调用方自己做分页处理
	2. sourceTime 必须是今天内的时间, 不能处理过去的. 有过去时间的记录 error 日志
	3. 用消息处理库存的请求必须有kafkaId字段
## 逻辑处理
	1. 查询库存主体(ownerId, ownerType, skuNo), 不存在插入库存主体
	2. 插入库存流水, 对于事件处理的库存需要通过 kafkaId 查询库存流水是否已经处理过了, 如果已经处理过则不再重复处理
	3. 更新库存信息
## 数据库变更
	1. insert stock_journal
	2. update stock
## 后置检查
	无
## 事务处理
	默认事务处理
## 输出
	无

          **/
          
          
            
            java.util.List<com.today.api.purchase.response.ProcessStockResponseItem> processStock(com.today.api.stock.events.StockEvent event) throws com.github.dapeng.core.SoaException;
          
        
          /**
          * 

# 支持处理零散商品实时库存处理接口
## 业务描述
	处理实时库存: 暂时只有盘点业务调用
## 接口依赖
	无
## 边界异常说明
	无
## 输入
	1. list<stock_request.ProcessStockItem> 库存处理请求头
## 前置检查
	1. 一次最多处理1000个 sku 的库存, 如果超过1000个sku 请下游调用方自己做分页处理
	2. sourceTime 必须是今天内的时间, 不能处理过去的. 有过去时间的记录 error 日志
	3. 用消息处理库存的请求必须有kafkaId字段
## 逻辑处理
	1. 查询库存主体(ownerId, ownerType, skuNo), 不存在插入库存主体
	2. 插入库存流水, 对于事件处理的库存需要通过 kafkaId 查询库存流水是否已经处理过了, 如果已经处理过则不再重复处理
	3. 更新库存信息
## 数据库变更
	1. insert stock_journal
	2. update stock
## 后置检查
	无
## 事务处理
	默认事务处理
## 输出
	无

          **/
          
          
            
            java.util.List<com.today.api.purchase.response.ProcessStockResponseItem> processStockByPiecemeal(java.util.List<com.today.api.purchase.request.ProcessStockItem> request) throws com.github.dapeng.core.SoaException;
          
        
    }
    