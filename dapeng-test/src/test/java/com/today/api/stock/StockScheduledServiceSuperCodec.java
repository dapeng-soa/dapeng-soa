
        /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class StockScheduledServiceSuperCodec {
        
            //1. method_args
            public static class autoCalculateElemStock_args {
            

          }

            //2. method_result
            public static class autoCalculateElemStock_result {
            

          }

           //3. args_serializer
            public static class AutoCalculateElemStock_argsSerializer implements BeanSerializer<autoCalculateElemStock_args>{
            
      @Override
      public autoCalculateElemStock_args read(TProtocol iprot) throws TException{

      autoCalculateElemStock_args bean = new autoCalculateElemStock_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(autoCalculateElemStock_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("autoCalculateElemStock_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(autoCalculateElemStock_args bean) throws TException{
      
    }
    

            @Override
            public String toString(autoCalculateElemStock_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class AutoCalculateElemStock_resultSerializer implements BeanSerializer<autoCalculateElemStock_result>{
            @Override
            public autoCalculateElemStock_result read(TProtocol iprot) throws TException{

              autoCalculateElemStock_result bean = new autoCalculateElemStock_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(autoCalculateElemStock_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("autoCalculateElemStock_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(autoCalculateElemStock_result bean) throws TException{
      
    }
    

            @Override
            public String toString(autoCalculateElemStock_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          

        //5.

        //6. meta_args
        public static class getServiceMetadata_args {}

        //7. meta_result.
        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //8. args_serializer
        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //9. meta_resultSerializer
        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //10. echo_args
        public static class echo_args {}

        //11. echo_result.
        public static class echo_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //12. echo_argsSerializer
        public static class echo_argsSerializer implements BeanSerializer<echo_args> {

          @Override
          public echo_args read(TProtocol iprot) throws TException {

            echo_args bean =new echo_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_args bean) throws TException {}

          @Override
          public String toString(echo_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //13. echo_resultSerializer
        public static class echo_resultSerializer implements BeanSerializer<echo_result> {
          @Override
          public echo_result read(TProtocol iprot) throws TException {

            echo_result bean = new echo_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.RespFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(echo_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

       }
      