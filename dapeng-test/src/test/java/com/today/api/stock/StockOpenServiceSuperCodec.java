
        /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class StockOpenServiceSuperCodec {
        
            //1. method_args
            public static class getStoreStock_args {
            
                private com.today.api.stock.request.GetStoreStockRequest request;
                public com.today.api.stock.request.GetStoreStockRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.stock.request.GetStoreStockRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class getStoreStock_result {
            
                  private java.util.List<com.today.api.stock.response.GetStoreStockResponse> success;
                  public java.util.List<com.today.api.stock.response.GetStoreStockResponse> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.today.api.stock.response.GetStoreStockResponse> success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class GetStoreStock_argsSerializer implements BeanSerializer<getStoreStock_args>{
            
      @Override
      public getStoreStock_args read(TProtocol iprot) throws TException{

      getStoreStock_args bean = new getStoreStock_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.stock.request.GetStoreStockRequest elem0 = new com.today.api.stock.request.GetStoreStockRequest();
        elem0=new GetStoreStockRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getStoreStock_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("getStoreStock_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.stock.request.GetStoreStockRequest elem0 = bean.getRequest();
             new GetStoreStockRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getStoreStock_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new GetStoreStockRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(getStoreStock_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class GetStoreStock_resultSerializer implements BeanSerializer<getStoreStock_result>{
            @Override
            public getStoreStock_result read(TProtocol iprot) throws TException{

              getStoreStock_result bean = new getStoreStock_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.LIST){
                     TList _list0 = iprot.readListBegin();
        java.util.List<com.today.api.stock.response.GetStoreStockResponse> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.today.api.stock.response.GetStoreStockResponse elem1 = new com.today.api.stock.response.GetStoreStockResponse();
        elem1=new GetStoreStockResponseSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getStoreStock_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("getStoreStock_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.LIST, (short) 0));
            java.util.List<com.today.api.stock.response.GetStoreStockResponse> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new TList(TType.STRUCT, elem0.size()));
          for(com.today.api.stock.response.GetStoreStockResponse elem1 : elem0){
           new GetStoreStockResponseSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getStoreStock_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(getStoreStock_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class checkStoreStock_args {
            
                private com.today.api.stock.request.CheckStoreStockRequest request;
                public com.today.api.stock.request.CheckStoreStockRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.stock.request.CheckStoreStockRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class checkStoreStock_result {
            
                  private java.util.List<com.today.api.stock.response.CheckStoreStockResponse> success;
                  public java.util.List<com.today.api.stock.response.CheckStoreStockResponse> getSuccess(){
                  return success;
                }

                  public void setSuccess(java.util.List<com.today.api.stock.response.CheckStoreStockResponse> success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class CheckStoreStock_argsSerializer implements BeanSerializer<checkStoreStock_args>{
            
      @Override
      public checkStoreStock_args read(TProtocol iprot) throws TException{

      checkStoreStock_args bean = new checkStoreStock_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.stock.request.CheckStoreStockRequest elem0 = new com.today.api.stock.request.CheckStoreStockRequest();
        elem0=new CheckStoreStockRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(checkStoreStock_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("checkStoreStock_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.stock.request.CheckStoreStockRequest elem0 = bean.getRequest();
             new CheckStoreStockRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(checkStoreStock_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new CheckStoreStockRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(checkStoreStock_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class CheckStoreStock_resultSerializer implements BeanSerializer<checkStoreStock_result>{
            @Override
            public checkStoreStock_result read(TProtocol iprot) throws TException{

              checkStoreStock_result bean = new checkStoreStock_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.LIST){
                     TList _list0 = iprot.readListBegin();
        java.util.List<com.today.api.stock.response.CheckStoreStockResponse> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.today.api.stock.response.CheckStoreStockResponse elem1 = new com.today.api.stock.response.CheckStoreStockResponse();
        elem1=new CheckStoreStockResponseSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(checkStoreStock_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("checkStoreStock_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.LIST, (short) 0));
            java.util.List<com.today.api.stock.response.CheckStoreStockResponse> elem0 = bean.getSuccess();
            
          oprot.writeListBegin(new TList(TType.STRUCT, elem0.size()));
          for(com.today.api.stock.response.CheckStoreStockResponse elem1 : elem0){
           new CheckStoreStockResponseSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(checkStoreStock_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
    }
    

            @Override
            public String toString(checkStoreStock_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class deductStockByApp_args {
            
                private com.today.api.stock.request.DeductStockByAppRequest request;
                public com.today.api.stock.request.DeductStockByAppRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.stock.request.DeductStockByAppRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class deductStockByApp_result {
            
                  private com.today.api.stock.response.DeductStockByAppResponse success;
                  public com.today.api.stock.response.DeductStockByAppResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.stock.response.DeductStockByAppResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class DeductStockByApp_argsSerializer implements BeanSerializer<deductStockByApp_args>{
            
      @Override
      public deductStockByApp_args read(TProtocol iprot) throws TException{

      deductStockByApp_args bean = new deductStockByApp_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.stock.request.DeductStockByAppRequest elem0 = new com.today.api.stock.request.DeductStockByAppRequest();
        elem0=new DeductStockByAppRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(deductStockByApp_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("deductStockByApp_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.stock.request.DeductStockByAppRequest elem0 = bean.getRequest();
             new DeductStockByAppRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deductStockByApp_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new DeductStockByAppRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(deductStockByApp_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class DeductStockByApp_resultSerializer implements BeanSerializer<deductStockByApp_result>{
            @Override
            public deductStockByApp_result read(TProtocol iprot) throws TException{

              deductStockByApp_result bean = new deductStockByApp_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.stock.response.DeductStockByAppResponse elem0 = new com.today.api.stock.response.DeductStockByAppResponse();
        elem0=new DeductStockByAppResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deductStockByApp_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("deductStockByApp_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.stock.response.DeductStockByAppResponse elem0 = bean.getSuccess();
             new DeductStockByAppResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deductStockByApp_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new DeductStockByAppResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(deductStockByApp_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class addStockByAppReturn_args {
            
                private com.today.api.stock.request.AddStockByAppReturnRequest request;
                public com.today.api.stock.request.AddStockByAppReturnRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.stock.request.AddStockByAppReturnRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class addStockByAppReturn_result {
            
                  private com.today.api.stock.response.AddStockByAppReturnResponse success;
                  public com.today.api.stock.response.AddStockByAppReturnResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.stock.response.AddStockByAppReturnResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class AddStockByAppReturn_argsSerializer implements BeanSerializer<addStockByAppReturn_args>{
            
      @Override
      public addStockByAppReturn_args read(TProtocol iprot) throws TException{

      addStockByAppReturn_args bean = new addStockByAppReturn_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.stock.request.AddStockByAppReturnRequest elem0 = new com.today.api.stock.request.AddStockByAppReturnRequest();
        elem0=new AddStockByAppReturnRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(addStockByAppReturn_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("addStockByAppReturn_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.stock.request.AddStockByAppReturnRequest elem0 = bean.getRequest();
             new AddStockByAppReturnRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(addStockByAppReturn_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new AddStockByAppReturnRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(addStockByAppReturn_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class AddStockByAppReturn_resultSerializer implements BeanSerializer<addStockByAppReturn_result>{
            @Override
            public addStockByAppReturn_result read(TProtocol iprot) throws TException{

              addStockByAppReturn_result bean = new addStockByAppReturn_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.stock.response.AddStockByAppReturnResponse elem0 = new com.today.api.stock.response.AddStockByAppReturnResponse();
        elem0=new AddStockByAppReturnResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(addStockByAppReturn_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("addStockByAppReturn_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.stock.response.AddStockByAppReturnResponse elem0 = bean.getSuccess();
             new AddStockByAppReturnResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(addStockByAppReturn_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new AddStockByAppReturnResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(addStockByAppReturn_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          

        //5.

        //6. meta_args
        public static class getServiceMetadata_args {}

        //7. meta_result.
        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //8. args_serializer
        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //9. meta_resultSerializer
        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //10. echo_args
        public static class echo_args {}

        //11. echo_result.
        public static class echo_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //12. echo_argsSerializer
        public static class echo_argsSerializer implements BeanSerializer<echo_args> {

          @Override
          public echo_args read(TProtocol iprot) throws TException {

            echo_args bean =new echo_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_args bean) throws TException {}

          @Override
          public String toString(echo_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //13. echo_resultSerializer
        public static class echo_resultSerializer implements BeanSerializer<echo_result> {
          @Override
          public echo_result read(TProtocol iprot) throws TException {

            echo_result bean = new echo_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.RespFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(echo_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

       }
      