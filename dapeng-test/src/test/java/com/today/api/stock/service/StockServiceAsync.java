
        /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock.service;

        import com.github.dapeng.core.Processor;
        import com.github.dapeng.core.Service;
        import com.github.dapeng.core.SoaGlobalTransactional;

        import java.util.concurrent.Future;

        /**
         * Autogenerated by Dapeng-Code-Generator (2.2.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

        * 
        **/
        @com.github.dapeng.core.CustomConfig()
        @Service(name="com.today.api.stock.service.StockService",version = "1.0.0")
        @Processor(className = "com.today.api.stock.StockServiceAsyncCodec$Processor")
        public interface StockServiceAsync  extends com.github.dapeng.core.definition.AsyncService {
        
            /**
            * 

# 添加标品库存信息
## 业务描述
        添加标品库存信息
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1.CreateStockRequest  添加标品库存实体
## 前置检查
        1验证字段是否有效，如门店id，供应商id，商品id调取外部服务接口是否合法
        2验证表单字段是否合法：调取商品供应商实时信息验证表单中信息是否合法
## 逻辑处理
        1.根据ownerId,ownerType,sku_no,确定唯一记录.
        2.有记录,则执行更新操作.更新为当前最新库存,并加入流水信息
        3.无记录,则插入一条记录,并加入流水信息
## 数据库变更
        1. insert into stock,stock_journal
        2.update stock

## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.CreateStockResponse 返回实体 包含id,详情

            **/
            
            
              
              Future<Void> addStockAction(com.today.api.purchase.request.CreateStockRequest request) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 

# 盘点库存更改
## 业务描述
        修改库存信息
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1.UpdateInventoryRequest
## 前置检查
        1验证字段是否有效，如门店id，供应商id，商品id调取外部服务接口是否合法
        2验证表单字段是否合法：调取商品供应商实时信息验证表单中信息是否合法
## 逻辑处理
        1.直接更新库存

## 数据库变更
        1. insert into stock,stock_journal

## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.void 没异常就是成功更新了.

            **/
            
            
              
              Future<Void> updateInventoryAction(com.today.api.purchase.request.UpdateInventoryRequest request) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 
            **/
            
            
              
              Future<Void> deleteStock(java.util.List<Long> ids) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 

# 根据门店id或者仓库id查询该维度下的实际库存，默认从redis缓存中获取HGET对象field库存值
## 业务描述
       根据门店id或者仓库id查询该维度下的实际库存，默认从redis缓存中获取HGET对象field库存值
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1.stockId
## 前置检查
        1验证字段是否有效，如门店id，供应商id，商品id调取外部服务接口是否合法
        2验证表单字段是否合法：调取商品供应商实时信息验证表单中信息是否合法
## 逻辑处理


## 数据库变更
        无

## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.TStock详细信息

            **/
            
            
              
              Future<com.today.api.purchase.response.StockQueryResponse> getStockByOwnerId(com.today.api.purchase.request.StockQueryRequest stockQueryRequest) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 

# 门店事实库存查询
## 业务描述
       根据门店id查询该维度下的实际库存
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1.storeId
## 前置检查
## 逻辑处理


## 数据库变更
        无

## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.TStock详细信息

            **/
            
            
              
              Future<com.today.api.purchase.response.ListSkuStockByStoreCodeResponse> listSkuStockByStoreCode(com.today.api.purchase.request.ListSkuStockByStoreCodeRequest request) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 

# 简单库存列表查询
## 接口依赖
            无
## 注意事项


# 简单库存列表查询
## 业务描述
            简单库存列表查询
## 接口依赖
            无
## 边界异常说明
            无
## 输入
            无
## 前置检查
            无
##  权限检查
            无
##  逻辑处理
            无
## 数据库变更
            无
##  事务处理
            无
##  输出
            无

            **/
            
            
              
              Future<com.today.api.purchase.response.ListStockByStoreIdResponse> listStockByStoreId(com.today.api.purchase.request.ListStockByStoreIdRequest request) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 
            **/
            
            
              
              Future<com.today.api.purchase.response.InventoryTransOutQueryResponse> listInventoryTransOutInfo(com.today.api.purchase.request.InventoryTransOutQueryRequest request) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 
            **/
            
            
              
              Future<Void> updateStockByStoreAndSkuNos(String storeId, java.util.List<String> skuNoList) throws com.github.dapeng.core.SoaException;
            
          
            /**
            * 
            **/
            
            
              
              Future<Void> calculateElemStock() throws com.github.dapeng.core.SoaException;
            
          
      }
      