
        /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class StockServiceSuperCodec {
        
            //1. method_args
            public static class addStockAction_args {
            
                private com.today.api.purchase.request.CreateStockRequest request;
                public com.today.api.purchase.request.CreateStockRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.purchase.request.CreateStockRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class addStockAction_result {
            

          }

           //3. args_serializer
            public static class AddStockAction_argsSerializer implements BeanSerializer<addStockAction_args>{
            
      @Override
      public addStockAction_args read(TProtocol iprot) throws TException{

      addStockAction_args bean = new addStockAction_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.CreateStockRequest elem0 = new com.today.api.purchase.request.CreateStockRequest();
        elem0=new com.today.api.purchase.request.serializer.CreateStockRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(addStockAction_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("addStockAction_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.CreateStockRequest elem0 = bean.getRequest();
             new com.today.api.purchase.request.serializer.CreateStockRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(addStockAction_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today.api.purchase.request.serializer.CreateStockRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(addStockAction_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class AddStockAction_resultSerializer implements BeanSerializer<addStockAction_result>{
            @Override
            public addStockAction_result read(TProtocol iprot) throws TException{

              addStockAction_result bean = new addStockAction_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(addStockAction_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("addStockAction_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(addStockAction_result bean) throws TException{
      
    }
    

            @Override
            public String toString(addStockAction_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class updateInventoryAction_args {
            
                private com.today.api.purchase.request.UpdateInventoryRequest request;
                public com.today.api.purchase.request.UpdateInventoryRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.purchase.request.UpdateInventoryRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class updateInventoryAction_result {
            

          }

           //3. args_serializer
            public static class UpdateInventoryAction_argsSerializer implements BeanSerializer<updateInventoryAction_args>{
            
      @Override
      public updateInventoryAction_args read(TProtocol iprot) throws TException{

      updateInventoryAction_args bean = new updateInventoryAction_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.UpdateInventoryRequest elem0 = new com.today.api.purchase.request.UpdateInventoryRequest();
        elem0=new com.today.api.purchase.request.serializer.UpdateInventoryRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(updateInventoryAction_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("updateInventoryAction_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.UpdateInventoryRequest elem0 = bean.getRequest();
             new com.today.api.purchase.request.serializer.UpdateInventoryRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateInventoryAction_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today.api.purchase.request.serializer.UpdateInventoryRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(updateInventoryAction_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class UpdateInventoryAction_resultSerializer implements BeanSerializer<updateInventoryAction_result>{
            @Override
            public updateInventoryAction_result read(TProtocol iprot) throws TException{

              updateInventoryAction_result bean = new updateInventoryAction_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateInventoryAction_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("updateInventoryAction_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateInventoryAction_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateInventoryAction_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class deleteStock_args {
            
                private java.util.List<Long> ids;
                public java.util.List<Long> getIds(){
                return this.ids;
              }
                public void setIds(java.util.List<Long> ids){
                this.ids = ids;
              }
              

          }

            //2. method_result
            public static class deleteStock_result {
            

          }

           //3. args_serializer
            public static class DeleteStock_argsSerializer implements BeanSerializer<deleteStock_args>{
            
      @Override
      public deleteStock_args read(TProtocol iprot) throws TException{

      deleteStock_args bean = new deleteStock_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.LIST){
               TList _list0 = iprot.readListBegin();
        java.util.List<Long> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          long elem1 = iprot.readI64();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setIds(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(deleteStock_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("deleteStock_args"));

      
            oprot.writeFieldBegin(new TField("ids", TType.LIST, (short) 1));
            java.util.List<Long> elem0 = bean.getIds();
            
          oprot.writeListBegin(new TList(TType.I64, elem0.size()));
          for(Long elem1 : elem0){
          oprot.writeI64(elem1);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(deleteStock_args bean) throws TException{
      
              if(bean.getIds() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ids字段不允许为空");
            
    }
    

            @Override
            public String toString(deleteStock_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class DeleteStock_resultSerializer implements BeanSerializer<deleteStock_result>{
            @Override
            public deleteStock_result read(TProtocol iprot) throws TException{

              deleteStock_result bean = new deleteStock_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(deleteStock_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("deleteStock_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(deleteStock_result bean) throws TException{
      
    }
    

            @Override
            public String toString(deleteStock_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class getStockByOwnerId_args {
            
                private com.today.api.purchase.request.StockQueryRequest stockQueryRequest;
                public com.today.api.purchase.request.StockQueryRequest getStockQueryRequest(){
                return this.stockQueryRequest;
              }
                public void setStockQueryRequest(com.today.api.purchase.request.StockQueryRequest stockQueryRequest){
                this.stockQueryRequest = stockQueryRequest;
              }
              

          }

            //2. method_result
            public static class getStockByOwnerId_result {
            
                  private com.today.api.purchase.response.StockQueryResponse success;
                  public com.today.api.purchase.response.StockQueryResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.purchase.response.StockQueryResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class GetStockByOwnerId_argsSerializer implements BeanSerializer<getStockByOwnerId_args>{
            
      @Override
      public getStockByOwnerId_args read(TProtocol iprot) throws TException{

      getStockByOwnerId_args bean = new getStockByOwnerId_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.StockQueryRequest elem0 = new com.today.api.purchase.request.StockQueryRequest();
        elem0=new com.today.api.purchase.request.serializer.StockQueryRequestSerializer().read(iprot);
       bean.setStockQueryRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(getStockByOwnerId_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("getStockByOwnerId_args"));

      
            oprot.writeFieldBegin(new TField("stockQueryRequest", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.StockQueryRequest elem0 = bean.getStockQueryRequest();
             new com.today.api.purchase.request.serializer.StockQueryRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(getStockByOwnerId_args bean) throws TException{
      
              if(bean.getStockQueryRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "stockQueryRequest字段不允许为空");
            
                if(bean.getStockQueryRequest() != null)
                new com.today.api.purchase.request.serializer.StockQueryRequestSerializer().validate(bean.getStockQueryRequest());
              
    }
    

            @Override
            public String toString(getStockByOwnerId_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class GetStockByOwnerId_resultSerializer implements BeanSerializer<getStockByOwnerId_result>{
            @Override
            public getStockByOwnerId_result read(TProtocol iprot) throws TException{

              getStockByOwnerId_result bean = new getStockByOwnerId_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.purchase.response.StockQueryResponse elem0 = new com.today.api.purchase.response.StockQueryResponse();
        elem0=new com.today.api.purchase.response.serializer.StockQueryResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(getStockByOwnerId_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("getStockByOwnerId_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.purchase.response.StockQueryResponse elem0 = bean.getSuccess();
             new com.today.api.purchase.response.serializer.StockQueryResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(getStockByOwnerId_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today.api.purchase.response.serializer.StockQueryResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(getStockByOwnerId_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class listSkuStockByStoreCode_args {
            
                private com.today.api.purchase.request.ListSkuStockByStoreCodeRequest request;
                public com.today.api.purchase.request.ListSkuStockByStoreCodeRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.purchase.request.ListSkuStockByStoreCodeRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class listSkuStockByStoreCode_result {
            
                  private com.today.api.purchase.response.ListSkuStockByStoreCodeResponse success;
                  public com.today.api.purchase.response.ListSkuStockByStoreCodeResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.purchase.response.ListSkuStockByStoreCodeResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class ListSkuStockByStoreCode_argsSerializer implements BeanSerializer<listSkuStockByStoreCode_args>{
            
      @Override
      public listSkuStockByStoreCode_args read(TProtocol iprot) throws TException{

      listSkuStockByStoreCode_args bean = new listSkuStockByStoreCode_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.ListSkuStockByStoreCodeRequest elem0 = new com.today.api.purchase.request.ListSkuStockByStoreCodeRequest();
        elem0=new com.today.api.purchase.request.serializer.ListSkuStockByStoreCodeRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listSkuStockByStoreCode_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listSkuStockByStoreCode_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.ListSkuStockByStoreCodeRequest elem0 = bean.getRequest();
             new com.today.api.purchase.request.serializer.ListSkuStockByStoreCodeRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listSkuStockByStoreCode_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today.api.purchase.request.serializer.ListSkuStockByStoreCodeRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listSkuStockByStoreCode_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class ListSkuStockByStoreCode_resultSerializer implements BeanSerializer<listSkuStockByStoreCode_result>{
            @Override
            public listSkuStockByStoreCode_result read(TProtocol iprot) throws TException{

              listSkuStockByStoreCode_result bean = new listSkuStockByStoreCode_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.purchase.response.ListSkuStockByStoreCodeResponse elem0 = new com.today.api.purchase.response.ListSkuStockByStoreCodeResponse();
        elem0=new com.today.api.purchase.response.serializer.ListSkuStockByStoreCodeResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listSkuStockByStoreCode_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listSkuStockByStoreCode_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.purchase.response.ListSkuStockByStoreCodeResponse elem0 = bean.getSuccess();
             new com.today.api.purchase.response.serializer.ListSkuStockByStoreCodeResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listSkuStockByStoreCode_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today.api.purchase.response.serializer.ListSkuStockByStoreCodeResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listSkuStockByStoreCode_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class listStockByStoreId_args {
            
                private com.today.api.purchase.request.ListStockByStoreIdRequest request;
                public com.today.api.purchase.request.ListStockByStoreIdRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.purchase.request.ListStockByStoreIdRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class listStockByStoreId_result {
            
                  private com.today.api.purchase.response.ListStockByStoreIdResponse success;
                  public com.today.api.purchase.response.ListStockByStoreIdResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.purchase.response.ListStockByStoreIdResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class ListStockByStoreId_argsSerializer implements BeanSerializer<listStockByStoreId_args>{
            
      @Override
      public listStockByStoreId_args read(TProtocol iprot) throws TException{

      listStockByStoreId_args bean = new listStockByStoreId_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.ListStockByStoreIdRequest elem0 = new com.today.api.purchase.request.ListStockByStoreIdRequest();
        elem0=new com.today.api.purchase.request.serializer.ListStockByStoreIdRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listStockByStoreId_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listStockByStoreId_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.ListStockByStoreIdRequest elem0 = bean.getRequest();
             new com.today.api.purchase.request.serializer.ListStockByStoreIdRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listStockByStoreId_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today.api.purchase.request.serializer.ListStockByStoreIdRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listStockByStoreId_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class ListStockByStoreId_resultSerializer implements BeanSerializer<listStockByStoreId_result>{
            @Override
            public listStockByStoreId_result read(TProtocol iprot) throws TException{

              listStockByStoreId_result bean = new listStockByStoreId_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.purchase.response.ListStockByStoreIdResponse elem0 = new com.today.api.purchase.response.ListStockByStoreIdResponse();
        elem0=new com.today.api.purchase.response.serializer.ListStockByStoreIdResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listStockByStoreId_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listStockByStoreId_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.purchase.response.ListStockByStoreIdResponse elem0 = bean.getSuccess();
             new com.today.api.purchase.response.serializer.ListStockByStoreIdResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listStockByStoreId_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today.api.purchase.response.serializer.ListStockByStoreIdResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listStockByStoreId_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class listInventoryTransOutInfo_args {
            
                private com.today.api.purchase.request.InventoryTransOutQueryRequest request;
                public com.today.api.purchase.request.InventoryTransOutQueryRequest getRequest(){
                return this.request;
              }
                public void setRequest(com.today.api.purchase.request.InventoryTransOutQueryRequest request){
                this.request = request;
              }
              

          }

            //2. method_result
            public static class listInventoryTransOutInfo_result {
            
                  private com.today.api.purchase.response.InventoryTransOutQueryResponse success;
                  public com.today.api.purchase.response.InventoryTransOutQueryResponse getSuccess(){
                  return success;
                }

                  public void setSuccess(com.today.api.purchase.response.InventoryTransOutQueryResponse success){
                  this.success = success;
                }
                

          }

           //3. args_serializer
            public static class ListInventoryTransOutInfo_argsSerializer implements BeanSerializer<listInventoryTransOutInfo_args>{
            
      @Override
      public listInventoryTransOutInfo_args read(TProtocol iprot) throws TException{

      listInventoryTransOutInfo_args bean = new listInventoryTransOutInfo_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRUCT){
              com.today.api.purchase.request.InventoryTransOutQueryRequest elem0 = new com.today.api.purchase.request.InventoryTransOutQueryRequest();
        elem0=new com.today.api.purchase.request.serializer.InventoryTransOutQueryRequestSerializer().read(iprot);
       bean.setRequest(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(listInventoryTransOutInfo_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listInventoryTransOutInfo_args"));

      
            oprot.writeFieldBegin(new TField("request", TType.STRUCT, (short) 1));
            com.today.api.purchase.request.InventoryTransOutQueryRequest elem0 = bean.getRequest();
             new com.today.api.purchase.request.serializer.InventoryTransOutQueryRequestSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(listInventoryTransOutInfo_args bean) throws TException{
      
              if(bean.getRequest() == null)
              throw new SoaException(SoaCode.StructFieldNull, "request字段不允许为空");
            
                if(bean.getRequest() != null)
                new com.today.api.purchase.request.serializer.InventoryTransOutQueryRequestSerializer().validate(bean.getRequest());
              
    }
    

            @Override
            public String toString(listInventoryTransOutInfo_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class ListInventoryTransOutInfo_resultSerializer implements BeanSerializer<listInventoryTransOutInfo_result>{
            @Override
            public listInventoryTransOutInfo_result read(TProtocol iprot) throws TException{

              listInventoryTransOutInfo_result bean = new listInventoryTransOutInfo_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.STRUCT){
                    com.today.api.purchase.response.InventoryTransOutQueryResponse elem0 = new com.today.api.purchase.response.InventoryTransOutQueryResponse();
        elem0=new com.today.api.purchase.response.serializer.InventoryTransOutQueryResponseSerializer().read(iprot);
       bean.setSuccess(elem0);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(listInventoryTransOutInfo_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("listInventoryTransOutInfo_result"));

      
            oprot.writeFieldBegin(new TField("success", TType.STRUCT, (short) 0));
            com.today.api.purchase.response.InventoryTransOutQueryResponse elem0 = bean.getSuccess();
             new com.today.api.purchase.response.serializer.InventoryTransOutQueryResponseSerializer().write(elem0, oprot);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(listInventoryTransOutInfo_result bean) throws TException{
      
              if(bean.getSuccess() == null)
              throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
            
                if(bean.getSuccess() != null)
                new com.today.api.purchase.response.serializer.InventoryTransOutQueryResponseSerializer().validate(bean.getSuccess());
              
    }
    

            @Override
            public String toString(listInventoryTransOutInfo_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class updateStockByStoreAndSkuNos_args {
            
                private String storeId;
                public String getStoreId(){
                return this.storeId;
              }
                public void setStoreId(String storeId){
                this.storeId = storeId;
              }
              
                private java.util.List<String> skuNoList;
                public java.util.List<String> getSkuNoList(){
                return this.skuNoList;
              }
                public void setSkuNoList(java.util.List<String> skuNoList){
                this.skuNoList = skuNoList;
              }
              

          }

            //2. method_result
            public static class updateStockByStoreAndSkuNos_result {
            

          }

           //3. args_serializer
            public static class UpdateStockByStoreAndSkuNos_argsSerializer implements BeanSerializer<updateStockByStoreAndSkuNos_args>{
            
      @Override
      public updateStockByStoreAndSkuNos_args read(TProtocol iprot) throws TException{

      updateStockByStoreAndSkuNos_args bean = new updateStockByStoreAndSkuNos_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setStoreId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.LIST){
               TList _list0 = iprot.readListBegin();
        java.util.List<String> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          String elem1 = iprot.readString();
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setSkuNoList(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(updateStockByStoreAndSkuNos_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("updateStockByStoreAndSkuNos_args"));

      
            oprot.writeFieldBegin(new TField("storeId", TType.STRING, (short) 1));
            String elem0 = bean.getStoreId();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("skuNoList", TType.LIST, (short) 2));
            java.util.List<String> elem1 = bean.getSkuNoList();
            
          oprot.writeListBegin(new TList(TType.STRING, elem1.size()));
          for(String elem2 : elem1){
          oprot.writeString(elem2);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(updateStockByStoreAndSkuNos_args bean) throws TException{
      
              if(bean.getStoreId() == null)
              throw new SoaException(SoaCode.StructFieldNull, "storeId字段不允许为空");
            
              if(bean.getSkuNoList() == null)
              throw new SoaException(SoaCode.StructFieldNull, "skuNoList字段不允许为空");
            
    }
    

            @Override
            public String toString(updateStockByStoreAndSkuNos_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class UpdateStockByStoreAndSkuNos_resultSerializer implements BeanSerializer<updateStockByStoreAndSkuNos_result>{
            @Override
            public updateStockByStoreAndSkuNos_result read(TProtocol iprot) throws TException{

              updateStockByStoreAndSkuNos_result bean = new updateStockByStoreAndSkuNos_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(updateStockByStoreAndSkuNos_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("updateStockByStoreAndSkuNos_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(updateStockByStoreAndSkuNos_result bean) throws TException{
      
    }
    

            @Override
            public String toString(updateStockByStoreAndSkuNos_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          
            //1. method_args
            public static class calculateElemStock_args {
            

          }

            //2. method_result
            public static class calculateElemStock_result {
            

          }

           //3. args_serializer
            public static class CalculateElemStock_argsSerializer implements BeanSerializer<calculateElemStock_args>{
            
      @Override
      public calculateElemStock_args read(TProtocol iprot) throws TException{

      calculateElemStock_args bean = new calculateElemStock_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(calculateElemStock_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("calculateElemStock_args"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(calculateElemStock_args bean) throws TException{
      
    }
    

            @Override
            public String toString(calculateElemStock_args bean) { return bean == null ? "null" : bean.toString(); }
          }


            //4.ResultSerializer
            public static class CalculateElemStock_resultSerializer implements BeanSerializer<calculateElemStock_result>{
            @Override
            public calculateElemStock_result read(TProtocol iprot) throws TException{

              calculateElemStock_result bean = new calculateElemStock_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(calculateElemStock_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("calculateElemStock_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(calculateElemStock_result bean) throws TException{
      
    }
    

            @Override
            public String toString(calculateElemStock_result bean) { return bean == null ? "null" : bean.toString(); }
          }

          

        //5.

        //6. meta_args
        public static class getServiceMetadata_args {}

        //7. meta_result.
        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //8. args_serializer
        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //9. meta_resultSerializer
        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.StructFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //10. echo_args
        public static class echo_args {}

        //11. echo_result.
        public static class echo_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }
        }

        //12. echo_argsSerializer
        public static class echo_argsSerializer implements BeanSerializer<echo_args> {

          @Override
          public echo_args read(TProtocol iprot) throws TException {

            echo_args bean =new echo_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_args bean) throws TException {}

          @Override
          public String toString(echo_args bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        //13. echo_resultSerializer
        public static class echo_resultSerializer implements BeanSerializer<echo_result> {
          @Override
          public echo_result read(TProtocol iprot) throws TException {

            echo_result bean = new echo_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(echo_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("echo_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(echo_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.RespFieldNull, "success字段不允许为空");
          }

          @Override
          public String toString(echo_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

       }
      