/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock;

      import com.github.dapeng.core.*;
      import com.github.dapeng.org.apache.thrift.*;
      import java.util.concurrent.CompletableFuture;
      import java.util.concurrent.Future;
      import java.util.ServiceLoader;
      import com.today.api.stock.StockOpenServiceAsyncCodec.*;
      import com.today.api.stock.StockOpenServiceSuperCodec.*;
      import com.today.api.stock.service.StockOpenServiceAsync;

      /**
       * Autogenerated by Dapeng-Code-Generator (2.1.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

      **/
      public class StockOpenServiceAsyncClient implements StockOpenServiceAsync{
      private final String serviceName;
      private final String version;

      private SoaConnectionPool pool;
      private final SoaConnectionPool.ClientInfo clientInfo;

      public StockOpenServiceAsyncClient() {
        this.serviceName = "com.today.api.stock.service.StockOpenService";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      public StockOpenServiceAsyncClient(String serviceVersion) {
        this.serviceName = "com.today.api.stock.service.StockOpenService";
        this.version = serviceVersion;

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      
          
            /**
            * 

# APP 业务查询库存
## 业务描述
        根据门店号、货号列表，批量查询门店剩余库存
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1. storeId 财务店号
        2. List<skuNo>
## 前置检查
        1. 财务店号必须是八位
        2. skuNo 必须是八位
        3. 最多查询200个商品
## 逻辑处理
        1. 查询指定店铺指定货号的库存
## 数据库变更
        无
## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.

            **/
            
              public CompletableFuture<java.util.List<com.today.api.stock.response.GetStoreStockResponse>> getStoreStock(com.today.api.stock.request.GetStoreStockRequest request) throws SoaException{

              String methodName = "getStoreStock";
              getStoreStock_args getStoreStock_args = new getStoreStock_args();
              getStoreStock_args.setRequest(request);
                

              CompletableFuture<getStoreStock_result> response = (CompletableFuture<getStoreStock_result>) pool.sendAsync(serviceName,version,"getStoreStock",getStoreStock_args, new GetStoreStock_argsSerializer(), new GetStoreStock_resultSerializer());

              
                  
                      return response.thenApply((getStoreStock_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

# APP 检查系统库存是否足量
## 业务描述
        根据门店号、货号列表，批量 查询门店剩余库存量是否在安全库存范围内
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1. storeId 财务店号
        2. List<skuNo>
## 前置检查
        1. 财务店号必须是八位
        2. skuNo 必须是八位
        3. 最多查询200个商品
## 逻辑处理
        1. 查询指定店铺指定货号的库存
## 数据库变更
        无
## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.

            **/
            
              public CompletableFuture<java.util.List<com.today.api.stock.response.CheckStoreStockResponse>> checkStoreStock(com.today.api.stock.request.CheckStoreStockRequest request) throws SoaException{

              String methodName = "checkStoreStock";
              checkStoreStock_args checkStoreStock_args = new checkStoreStock_args();
              checkStoreStock_args.setRequest(request);
                

              CompletableFuture<checkStoreStock_result> response = (CompletableFuture<checkStoreStock_result>) pool.sendAsync(serviceName,version,"checkStoreStock",checkStoreStock_args, new CheckStoreStock_argsSerializer(), new CheckStoreStock_resultSerializer());

              
                  
                      return response.thenApply((checkStoreStock_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

# APP 订单扣减库存
## 业务描述
        PP 订单扣根据门店号、货号列表, 扣减库存，批量扣减库存量
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1. storeId 财务店号
        2. List<DeductStockByAppRequestItem>
## 前置检查
        1. 财务店号必须是八位
        2. skuNo 必须是八位
        3. 最多扣减200个商品
## 逻辑处理
        1. 查询指定店铺指定货号的库存, 如果不成在则扣减不成功
        2. 判断是否所有的库存都能扣减成功, 只要有一个 sku  扣减库存之后,库存量少于等于=3 则扣减不成功.
## 数据库变更
        update stock
        insert stock_jounarl
## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.

            **/
            
              public CompletableFuture<com.today.api.stock.response.DeductStockByAppResponse> deductStockByApp(com.today.api.stock.request.DeductStockByAppRequest request) throws SoaException{

              String methodName = "deductStockByApp";
              deductStockByApp_args deductStockByApp_args = new deductStockByApp_args();
              deductStockByApp_args.setRequest(request);
                

              CompletableFuture<deductStockByApp_result> response = (CompletableFuture<deductStockByApp_result>) pool.sendAsync(serviceName,version,"deductStockByApp",deductStockByApp_args, new DeductStockByApp_argsSerializer(), new DeductStockByApp_resultSerializer());

              
                  
                      return response.thenApply((deductStockByApp_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 

# APP 订单退货, 库存增加
## 业务描述
        APP 订单退货根据门店号、货号列表, 扣减库存，批量增加库存量
## 接口依赖
        无
## 边界异常说明
        无
## 输入
        1. storeId 财务店号
        2. List<DeductStockByAppRequestItem>
## 前置检查
        1. 财务店号必须是八位
        2. skuNo 必须是八位
        3. 最多扣减200个商品
## 逻辑处理
        1. 查询指定店铺指定货号的库存, 如果不成在则扣减不成功
        2. 判断是否所有的库存都能扣减成功, 只要有一个 sku  扣减库存之后,库存量少于等于=3 则扣减不成功.
## 数据库变更
        update stock
        insert stock_jounarl
## 后置检查
        无
## 事务处理
        默认事务处理
## 输出
        1.

            **/
            
              public CompletableFuture<com.today.api.stock.response.AddStockByAppReturnResponse> addStockByAppReturn(com.today.api.stock.request.AddStockByAppReturnRequest request) throws SoaException{

              String methodName = "addStockByAppReturn";
              addStockByAppReturn_args addStockByAppReturn_args = new addStockByAppReturn_args();
              addStockByAppReturn_args.setRequest(request);
                

              CompletableFuture<addStockByAppReturn_result> response = (CompletableFuture<addStockByAppReturn_result>) pool.sendAsync(serviceName,version,"addStockByAppReturn",addStockByAppReturn_args, new AddStockByAppReturn_argsSerializer(), new AddStockByAppReturn_resultSerializer());

              
                  
                      return response.thenApply((addStockByAppReturn_result result )->  result.getSuccess());
                    
                
            }
            
          

        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
        getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
        getServiceMetadata_result response = pool.send(serviceName,version,methodName,getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
        return response.getSuccess();
      }

      /**
      * echo
      **/
      public String echo() throws SoaException {
        String methodName = "echo";
        echo_args echo_args = new echo_args();
        echo_result response = pool.send(serviceName,version,methodName,echo_args, new echo_argsSerializer(), new echo_resultSerializer());
        return response.getSuccess();
      }
    }
    