 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.stock.vo.serializer;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.1.1)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class TStockSerializer implements BeanSerializer<com.today.api.stock.vo.TStock>{
        
      @Override
      public com.today.api.stock.vo.TStock read(TProtocol iprot) throws TException{

      com.today.api.stock.vo.TStock bean = new com.today.api.stock.vo.TStock();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setOwnerId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.StockOwnerTypeEnum elem0 = com.today.api.stock.enums.StockOwnerTypeEnum.findByValue(iprot.readI32());
       bean.setOwnerType(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuNo(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setOwnerName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setStockNum(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setFfStockWeight(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setUseUnit(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setLastBalanceStock(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLastBalanceFfStock(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setFinanceStock(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setFinanceFfStock(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.StockIsDeletedEnum elem0 = com.today.api.stock.enums.StockIsDeletedEnum.findByValue(iprot.readI32());
       bean.setIsDeleted(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 16:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setCreatedAt(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 17:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setCreatedBy(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 18:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setUpdatedBy(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 19:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setUpdatedAt(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 29:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setSellingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 30:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setBuyingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 31:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLogisticsPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 32:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLogisticsOutputTax(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 33:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setLogisticsPriceAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 34:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setStoreSellingPriceAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 35:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setKafkaId(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today.api.stock.vo.TStock bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("TStock"));

      
            oprot.writeFieldBegin(new TField("id", TType.I64, (short) 1));
            Long elem0 = bean.getId();
            oprot.writeI64(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("ownerId", TType.STRING, (short) 2));
            String elem1 = bean.getOwnerId();
            oprot.writeString(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("ownerType", TType.I32, (short) 3));
            com.today.api.stock.enums.StockOwnerTypeEnum elem2 = bean.getOwnerType();
            oprot.writeI32(elem2.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("skuNo", TType.STRING, (short) 4));
            String elem3 = bean.getSkuNo();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("ownerName", TType.STRING, (short) 6));
            String elem4 = bean.getOwnerName();
            oprot.writeString(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("skuName", TType.STRING, (short) 7));
            String elem5 = bean.getSkuName();
            oprot.writeString(elem5);
            
            oprot.writeFieldEnd();
          if(bean.getStockNum().isPresent()){
              oprot.writeFieldBegin(new TField("stockNum", TType.STRING, (short) 8));
              java.math.BigDecimal elem6 = bean.getStockNum().get();
              oprot.writeString(elem6.toString());
              
            }
            if(bean.getFfStockWeight().isPresent()){
              oprot.writeFieldBegin(new TField("ffStockWeight", TType.DOUBLE, (short) 9));
              Double elem7 = bean.getFfStockWeight().get();
              oprot.writeDouble(elem7);
              
            }
            if(bean.getUseUnit().isPresent()){
              oprot.writeFieldBegin(new TField("useUnit", TType.STRING, (short) 10));
              String elem8 = bean.getUseUnit().get();
              oprot.writeString(elem8);
              
            }
            if(bean.getLastBalanceStock().isPresent()){
              oprot.writeFieldBegin(new TField("lastBalanceStock", TType.I64, (short) 11));
              Long elem9 = bean.getLastBalanceStock().get();
              oprot.writeI64(elem9);
              
            }
            if(bean.getLastBalanceFfStock().isPresent()){
              oprot.writeFieldBegin(new TField("lastBalanceFfStock", TType.DOUBLE, (short) 12));
              Double elem10 = bean.getLastBalanceFfStock().get();
              oprot.writeDouble(elem10);
              
            }
            if(bean.getFinanceStock().isPresent()){
              oprot.writeFieldBegin(new TField("financeStock", TType.I64, (short) 13));
              Long elem11 = bean.getFinanceStock().get();
              oprot.writeI64(elem11);
              
            }
            if(bean.getFinanceFfStock().isPresent()){
              oprot.writeFieldBegin(new TField("financeFfStock", TType.DOUBLE, (short) 14));
              Double elem12 = bean.getFinanceFfStock().get();
              oprot.writeDouble(elem12);
              
            }
            if(bean.getIsDeleted().isPresent()){
              oprot.writeFieldBegin(new TField("isDeleted", TType.I32, (short) 15));
              com.today.api.stock.enums.StockIsDeletedEnum elem13 = bean.getIsDeleted().get();
              oprot.writeI32(elem13.getValue());
              
            }
            
            oprot.writeFieldBegin(new TField("createdAt", TType.I64, (short) 16));
            Long elem14 = bean.getCreatedAt();
            oprot.writeI64(elem14);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("createdBy", TType.I32, (short) 17));
            Integer elem15 = bean.getCreatedBy();
            oprot.writeI32(elem15);
            
            oprot.writeFieldEnd();
          if(bean.getUpdatedBy().isPresent()){
              oprot.writeFieldBegin(new TField("updatedBy", TType.I32, (short) 18));
              Integer elem16 = bean.getUpdatedBy().get();
              oprot.writeI32(elem16);
              
            }
            if(bean.getUpdatedAt().isPresent()){
              oprot.writeFieldBegin(new TField("updatedAt", TType.I64, (short) 19));
              Long elem17 = bean.getUpdatedAt().get();
              oprot.writeI64(elem17);
              
            }
            if(bean.getSellingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("sellingPrice", TType.DOUBLE, (short) 29));
              Double elem18 = bean.getSellingPrice().get();
              oprot.writeDouble(elem18);
              
            }
            if(bean.getBuyingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("buyingPrice", TType.DOUBLE, (short) 30));
              Double elem19 = bean.getBuyingPrice().get();
              oprot.writeDouble(elem19);
              
            }
            if(bean.getLogisticsPrice().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsPrice", TType.DOUBLE, (short) 31));
              Double elem20 = bean.getLogisticsPrice().get();
              oprot.writeDouble(elem20);
              
            }
            if(bean.getLogisticsOutputTax().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsOutputTax", TType.DOUBLE, (short) 32));
              Double elem21 = bean.getLogisticsOutputTax().get();
              oprot.writeDouble(elem21);
              
            }
            if(bean.getLogisticsPriceAmount().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsPriceAmount", TType.STRING, (short) 33));
              java.math.BigDecimal elem22 = bean.getLogisticsPriceAmount().get();
              oprot.writeString(elem22.toString());
              
            }
            if(bean.getStoreSellingPriceAmount().isPresent()){
              oprot.writeFieldBegin(new TField("storeSellingPriceAmount", TType.STRING, (short) 34));
              java.math.BigDecimal elem23 = bean.getStoreSellingPriceAmount().get();
              oprot.writeString(elem23.toString());
              
            }
            if(bean.getKafkaId().isPresent()){
              oprot.writeFieldBegin(new TField("kafkaId", TType.STRING, (short) 35));
              String elem24 = bean.getKafkaId().get();
              oprot.writeString(elem24);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today.api.stock.vo.TStock bean) throws TException{
      
              if(bean.getOwnerId() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ownerId字段不允许为空");
            
              if(bean.getOwnerType() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ownerType字段不允许为空");
            
              if(bean.getSkuNo() == null)
              throw new SoaException(SoaCode.StructFieldNull, "skuNo字段不允许为空");
            
              if(bean.getOwnerName() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ownerName字段不允许为空");
            
              if(bean.getSkuName() == null)
              throw new SoaException(SoaCode.StructFieldNull, "skuName字段不允许为空");
            
    }
    
        @Override
        public String toString(com.today.api.stock.vo.TStock bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      