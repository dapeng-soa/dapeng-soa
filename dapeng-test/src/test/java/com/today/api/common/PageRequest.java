/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.common;

        import java.util.Optional;
        import com.github.dapeng.org.apache.thrift.TException;
        import com.github.dapeng.org.apache.thrift.protocol.TCompactProtocol;
        import com.github.dapeng.util.TCommonTransport;

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

        *

 分页查询请求包

        **/
        public class PageRequest{
        
            /**
            *

 查询的开始序号（序号从零开始）

            **/
            public int start ;
            public int getStart(){ return this.start; }
            public void setStart(int start){ this.start = start; }

            public int start(){ return this.start; }
            public PageRequest start(int start){ this.start = start; return this; }
          
            /**
            *

 返回记录数

            **/
            public int limit ;
            public int getLimit(){ return this.limit; }
            public void setLimit(int limit){ this.limit = limit; }

            public int limit(){ return this.limit; }
            public PageRequest limit(int limit){ this.limit = limit; return this; }
          
            /**
            *

 排序的字段

            **/
            public Optional<String> sortFields = Optional.empty();
            public Optional<String> getSortFields(){ return this.sortFields; }
            public void setSortFields(Optional<String> sortFields){ this.sortFields = sortFields; }

            public Optional<String> sortFields(){ return this.sortFields; }
            public PageRequest sortFields(Optional<String> sortFields){ this.sortFields = sortFields; return this; }
          

        public static byte[] getBytesFromBean(PageRequest bean) throws TException {
          byte[] bytes = new byte[]{};
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Write);
          TCompactProtocol protocol = new TCompactProtocol(transport);

          new com.today.api.common.serializer.PageRequestSerializer().write(bean, protocol);
          transport.flush();
          return transport.getByteBuf();
        }

        public static PageRequest getBeanFromBytes(byte[] bytes) throws TException {
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Read);
          TCompactProtocol protocol = new TCompactProtocol(transport);
          return new com.today.api.common.serializer.PageRequestSerializer().read(protocol);
        }

        public String toString(){
          StringBuilder stringBuilder = new StringBuilder("{");
            stringBuilder.append("\"").append("start").append("\":").append(this.start).append(",");
    stringBuilder.append("\"").append("limit").append("\":").append(this.limit).append(",");
    stringBuilder.append("\"").append("sortFields").append("\":\"").append(this.sortFields.isPresent()?this.sortFields.get():null).append("\",");
    
            stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
            stringBuilder.append("}");

          return stringBuilder.toString();
        }
      }
      