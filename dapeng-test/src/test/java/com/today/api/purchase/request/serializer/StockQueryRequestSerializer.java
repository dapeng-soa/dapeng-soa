 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.purchase.request.serializer;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.2.0)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class StockQueryRequestSerializer implements BeanSerializer<com.today.api.purchase.request.StockQueryRequest>{
        
      @Override
      public com.today.api.purchase.request.StockQueryRequest read(TProtocol iprot) throws TException{

      com.today.api.purchase.request.StockQueryRequest bean = new com.today.api.purchase.request.StockQueryRequest();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setOwnerId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.StockOwnerTypeEnum elem0 = com.today.api.stock.enums.StockOwnerTypeEnum.findByValue(iprot.readI32());
       bean.setOwnerType(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setStartTime(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setEndTime(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == TType.STRUCT){
              com.today.api.common.PageRequest elem0 = new com.today.api.common.PageRequest();
        elem0=new PageRequestSerializer().read(iprot);
       bean.setPageRequest(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setCategoryCode(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.SkuTypeEnum elem0 = com.today.api.stock.enums.SkuTypeEnum.findByValue(iprot.readI32());
       bean.setSkuType(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setMinSellingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setMaxSellingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuName(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuNo(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setSkuMasterBarcode(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today.api.purchase.request.StockQueryRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("StockQueryRequest"));

      
            oprot.writeFieldBegin(new TField("ownerId", TType.STRING, (short) 1));
            String elem0 = bean.getOwnerId();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("ownerType", TType.I32, (short) 2));
            com.today.api.stock.enums.StockOwnerTypeEnum elem1 = bean.getOwnerType();
            oprot.writeI32(elem1.getValue());
            
            oprot.writeFieldEnd();
          if(bean.getStartTime().isPresent()){
              oprot.writeFieldBegin(new TField("startTime", TType.I64, (short) 3));
              Long elem2 = bean.getStartTime().get();
              oprot.writeI64(elem2);
              
            }
            if(bean.getEndTime().isPresent()){
              oprot.writeFieldBegin(new TField("endTime", TType.I64, (short) 4));
              Long elem3 = bean.getEndTime().get();
              oprot.writeI64(elem3);
              
            }
            if(bean.getPageRequest().isPresent()){
              oprot.writeFieldBegin(new TField("pageRequest", TType.STRUCT, (short) 5));
              com.today.api.common.PageRequest elem4 = bean.getPageRequest().get();
               new PageRequestSerializer().write(elem4, oprot);
              
            }
            if(bean.getCategoryCode().isPresent()){
              oprot.writeFieldBegin(new TField("categoryCode", TType.STRING, (short) 6));
              String elem5 = bean.getCategoryCode().get();
              oprot.writeString(elem5);
              
            }
            if(bean.getSkuType().isPresent()){
              oprot.writeFieldBegin(new TField("skuType", TType.I32, (short) 7));
              com.today.api.stock.enums.SkuTypeEnum elem6 = bean.getSkuType().get();
              oprot.writeI32(elem6.getValue());
              
            }
            if(bean.getMinSellingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("minSellingPrice", TType.DOUBLE, (short) 8));
              Double elem7 = bean.getMinSellingPrice().get();
              oprot.writeDouble(elem7);
              
            }
            if(bean.getMaxSellingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("maxSellingPrice", TType.DOUBLE, (short) 9));
              Double elem8 = bean.getMaxSellingPrice().get();
              oprot.writeDouble(elem8);
              
            }
            if(bean.getSkuName().isPresent()){
              oprot.writeFieldBegin(new TField("skuName", TType.STRING, (short) 10));
              String elem9 = bean.getSkuName().get();
              oprot.writeString(elem9);
              
            }
            if(bean.getSkuNo().isPresent()){
              oprot.writeFieldBegin(new TField("skuNo", TType.STRING, (short) 11));
              String elem10 = bean.getSkuNo().get();
              oprot.writeString(elem10);
              
            }
            if(bean.getSkuMasterBarcode().isPresent()){
              oprot.writeFieldBegin(new TField("skuMasterBarcode", TType.STRING, (short) 12));
              String elem11 = bean.getSkuMasterBarcode().get();
              oprot.writeString(elem11);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today.api.purchase.request.StockQueryRequest bean) throws TException{
      
              if(bean.getOwnerId() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ownerId字段不允许为空");
            
              if(bean.getOwnerType() == null)
              throw new SoaException(SoaCode.StructFieldNull, "ownerType字段不允许为空");
            
                if(bean.getPageRequest().isPresent())
                new PageRequestSerializer().validate(bean.getPageRequest().get());
              
    }
    
        @Override
        public String toString(com.today.api.purchase.request.StockQueryRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      