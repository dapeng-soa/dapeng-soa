 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.purchase.response.serializer;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.2.3)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class StoreTransInfoSerializer implements BeanSerializer<com.today.api.purchase.response.StoreTransInfo>{
        
      @Override
      public com.today.api.purchase.response.StoreTransInfo read(TProtocol iprot) throws TException{

      com.today.api.purchase.response.StoreTransInfo bean = new com.today.api.purchase.response.StoreTransInfo();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setBeforeStoreId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.I32){
              com.today.api.stock.enums.InventoryResultInventoryTypeEnum elem0 = com.today.api.stock.enums.InventoryResultInventoryTypeEnum.findByValue(iprot.readI32());
       bean.setInventoryResultInventoryTypeEnum(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setTransDate(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setAfterStoreId(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today.api.purchase.response.StoreTransInfo bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("StoreTransInfo"));

      
            oprot.writeFieldBegin(new TField("beforeStoreId", TType.STRING, (short) 1));
            String elem0 = bean.getBeforeStoreId();
            oprot.writeString(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("inventoryResultInventoryTypeEnum", TType.I32, (short) 2));
            com.today.api.stock.enums.InventoryResultInventoryTypeEnum elem1 = bean.getInventoryResultInventoryTypeEnum();
            oprot.writeI32(elem1.getValue());
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("transDate", TType.STRING, (short) 3));
            String elem2 = bean.getTransDate();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          if(bean.getAfterStoreId().isPresent()){
              oprot.writeFieldBegin(new TField("afterStoreId", TType.STRING, (short) 4));
              String elem3 = bean.getAfterStoreId().get();
              oprot.writeString(elem3);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today.api.purchase.response.StoreTransInfo bean) throws TException{
      
              if(bean.getBeforeStoreId() == null)
              throw new SoaException(SoaCode.StructFieldNull, "beforeStoreId字段不允许为空");
            
              if(bean.getInventoryResultInventoryTypeEnum() == null)
              throw new SoaException(SoaCode.StructFieldNull, "inventoryResultInventoryTypeEnum字段不允许为空");
            
              if(bean.getTransDate() == null)
              throw new SoaException(SoaCode.StructFieldNull, "transDate字段不允许为空");
            
    }
    
        @Override
        public String toString(com.today.api.purchase.response.StoreTransInfo bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      