/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.purchase.request;

        import java.util.Optional;
        import com.github.dapeng.org.apache.thrift.TException;
        import com.github.dapeng.org.apache.thrift.protocol.TCompactProtocol;
        import com.github.dapeng.util.TCommonTransport;

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.1-final)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

        *

 库存处理的最小结构单元

        **/
        public class AtomProcessStockItem{
        
            /**
            *

 库存主体: 财务店号或者仓库编号

            **/
            public String ownerId ;
            public String getOwnerId(){ return this.ownerId; }
            public void setOwnerId(String ownerId){ this.ownerId = ownerId; }

            public String ownerId(){ return this.ownerId; }
            public AtomProcessStockItem ownerId(String ownerId){ this.ownerId = ownerId; return this; }
          
            /**
            *

 库存主体类型: 1:门店(store);2:仓库(warehouse)

            **/
            public com.today.api.stock.enums.StockOwnerTypeEnum ownerType ;
            public com.today.api.stock.enums.StockOwnerTypeEnum getOwnerType(){ return this.ownerType; }
            public void setOwnerType(com.today.api.stock.enums.StockOwnerTypeEnum ownerType){ this.ownerType = ownerType; }

            public com.today.api.stock.enums.StockOwnerTypeEnum ownerType(){ return this.ownerType; }
            public AtomProcessStockItem ownerType(com.today.api.stock.enums.StockOwnerTypeEnum ownerType){ this.ownerType = ownerType; return this; }
          
            /**
            *

 货号

            **/
            public String skuNo ;
            public String getSkuNo(){ return this.skuNo; }
            public void setSkuNo(String skuNo){ this.skuNo = skuNo; }

            public String skuNo(){ return this.skuNo; }
            public AtomProcessStockItem skuNo(String skuNo){ this.skuNo = skuNo; return this; }
          
            /**
            *

 库存来源类型

            **/
            public com.today.api.stock.enums.StockJournalSourceTypeEnum2 sourceType ;
            public com.today.api.stock.enums.StockJournalSourceTypeEnum2 getSourceType(){ return this.sourceType; }
            public void setSourceType(com.today.api.stock.enums.StockJournalSourceTypeEnum2 sourceType){ this.sourceType = sourceType; }

            public com.today.api.stock.enums.StockJournalSourceTypeEnum2 sourceType(){ return this.sourceType; }
            public AtomProcessStockItem sourceType(com.today.api.stock.enums.StockJournalSourceTypeEnum2 sourceType){ this.sourceType = sourceType; return this; }
          
            /**
            *

 库存来源id: order_detial_id...

            **/
            public long sourceId ;
            public long getSourceId(){ return this.sourceId; }
            public void setSourceId(long sourceId){ this.sourceId = sourceId; }

            public long sourceId(){ return this.sourceId; }
            public AtomProcessStockItem sourceId(long sourceId){ this.sourceId = sourceId; return this; }
          
            /**
            *

 库存发生数: 自带正负

            **/
            public int stockNum ;
            public int getStockNum(){ return this.stockNum; }
            public void setStockNum(int stockNum){ this.stockNum = stockNum; }

            public int stockNum(){ return this.stockNum; }
            public AtomProcessStockItem stockNum(int stockNum){ this.stockNum = stockNum; return this; }
          
            /**
            *

 系统库存变化唯一 ID, 只有通过事件处理库存的业务才会有

            **/
            public long kafkaId ;
            public long getKafkaId(){ return this.kafkaId; }
            public void setKafkaId(long kafkaId){ this.kafkaId = kafkaId; }

            public long kafkaId(){ return this.kafkaId; }
            public AtomProcessStockItem kafkaId(long kafkaId){ this.kafkaId = kafkaId; return this; }
          
            /**
            *

 物流销价
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> logisticsPrice = Optional.empty();
            public Optional<java.math.BigDecimal> getLogisticsPrice(){ return this.logisticsPrice; }
            public void setLogisticsPrice(Optional<java.math.BigDecimal> logisticsPrice){ this.logisticsPrice = logisticsPrice; }

            public Optional<java.math.BigDecimal> logisticsPrice(){ return this.logisticsPrice; }
            public AtomProcessStockItem logisticsPrice(Optional<java.math.BigDecimal> logisticsPrice){ this.logisticsPrice = logisticsPrice; return this; }
          
            /**
            *

 物流销项税率
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> logisticsOutputTax = Optional.empty();
            public Optional<java.math.BigDecimal> getLogisticsOutputTax(){ return this.logisticsOutputTax; }
            public void setLogisticsOutputTax(Optional<java.math.BigDecimal> logisticsOutputTax){ this.logisticsOutputTax = logisticsOutputTax; }

            public Optional<java.math.BigDecimal> logisticsOutputTax(){ return this.logisticsOutputTax; }
            public AtomProcessStockItem logisticsOutputTax(Optional<java.math.BigDecimal> logisticsOutputTax){ this.logisticsOutputTax = logisticsOutputTax; return this; }
          
            /**
            *

 进价
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> buyingPrice = Optional.empty();
            public Optional<java.math.BigDecimal> getBuyingPrice(){ return this.buyingPrice; }
            public void setBuyingPrice(Optional<java.math.BigDecimal> buyingPrice){ this.buyingPrice = buyingPrice; }

            public Optional<java.math.BigDecimal> buyingPrice(){ return this.buyingPrice; }
            public AtomProcessStockItem buyingPrice(Optional<java.math.BigDecimal> buyingPrice){ this.buyingPrice = buyingPrice; return this; }
          
            /**
            *

 进项税率
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> supplierInputTax = Optional.empty();
            public Optional<java.math.BigDecimal> getSupplierInputTax(){ return this.supplierInputTax; }
            public void setSupplierInputTax(Optional<java.math.BigDecimal> supplierInputTax){ this.supplierInputTax = supplierInputTax; }

            public Optional<java.math.BigDecimal> supplierInputTax(){ return this.supplierInputTax; }
            public AtomProcessStockItem supplierInputTax(Optional<java.math.BigDecimal> supplierInputTax){ this.supplierInputTax = supplierInputTax; return this; }
          
            /**
            *

 售价
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> sellingPirce = Optional.empty();
            public Optional<java.math.BigDecimal> getSellingPirce(){ return this.sellingPirce; }
            public void setSellingPirce(Optional<java.math.BigDecimal> sellingPirce){ this.sellingPirce = sellingPirce; }

            public Optional<java.math.BigDecimal> sellingPirce(){ return this.sellingPirce; }
            public AtomProcessStockItem sellingPirce(Optional<java.math.BigDecimal> sellingPirce){ this.sellingPirce = sellingPirce; return this; }
          
            /**
            *

 销项税
 @datatype(name="bigdecimal")

            **/
            public Optional<java.math.BigDecimal> outputTax = Optional.empty();
            public Optional<java.math.BigDecimal> getOutputTax(){ return this.outputTax; }
            public void setOutputTax(Optional<java.math.BigDecimal> outputTax){ this.outputTax = outputTax; }

            public Optional<java.math.BigDecimal> outputTax(){ return this.outputTax; }
            public AtomProcessStockItem outputTax(Optional<java.math.BigDecimal> outputTax){ this.outputTax = outputTax; return this; }
          
            /**
            *

 备注

            **/
            public Optional<String> remark = Optional.empty();
            public Optional<String> getRemark(){ return this.remark; }
            public void setRemark(Optional<String> remark){ this.remark = remark; }

            public Optional<String> remark(){ return this.remark; }
            public AtomProcessStockItem remark(Optional<String> remark){ this.remark = remark; return this; }
          
            /**
            *

 来源时间

            **/
            public long sourceTime ;
            public long getSourceTime(){ return this.sourceTime; }
            public void setSourceTime(long sourceTime){ this.sourceTime = sourceTime; }

            public long sourceTime(){ return this.sourceTime; }
            public AtomProcessStockItem sourceTime(long sourceTime){ this.sourceTime = sourceTime; return this; }
          

        public static byte[] getBytesFromBean(AtomProcessStockItem bean) throws TException {
          byte[] bytes = new byte[]{};
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Write);
          TCompactProtocol protocol = new TCompactProtocol(transport);

          new com.today.api.purchase.request.serializer.AtomProcessStockItemSerializer().write(bean, protocol);
          transport.flush();
          return transport.getByteBuf();
        }

        public static AtomProcessStockItem getBeanFromBytes(byte[] bytes) throws TException {
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Read);
          TCompactProtocol protocol = new TCompactProtocol(transport);
          return new com.today.api.purchase.request.serializer.AtomProcessStockItemSerializer().read(protocol);
        }

        public String toString(){
          StringBuilder stringBuilder = new StringBuilder("{");
            stringBuilder.append("\"").append("ownerId").append("\":\"").append(this.ownerId).append("\",");
    stringBuilder.append("\"").append("ownerType").append("\":").append(this.ownerType).append(",");
    stringBuilder.append("\"").append("skuNo").append("\":\"").append(this.skuNo).append("\",");
    stringBuilder.append("\"").append("sourceType").append("\":").append(this.sourceType).append(",");
    stringBuilder.append("\"").append("sourceId").append("\":").append(this.sourceId).append(",");
    stringBuilder.append("\"").append("stockNum").append("\":").append(this.stockNum).append(",");
    stringBuilder.append("\"").append("kafkaId").append("\":").append(this.kafkaId).append(",");
    stringBuilder.append("\"").append("logisticsPrice").append("\":").append(this.logisticsPrice.isPresent()?this.logisticsPrice.get():null).append(",");
    stringBuilder.append("\"").append("logisticsOutputTax").append("\":").append(this.logisticsOutputTax.isPresent()?this.logisticsOutputTax.get():null).append(",");
    stringBuilder.append("\"").append("buyingPrice").append("\":").append(this.buyingPrice.isPresent()?this.buyingPrice.get():null).append(",");
    stringBuilder.append("\"").append("supplierInputTax").append("\":").append(this.supplierInputTax.isPresent()?this.supplierInputTax.get():null).append(",");
    stringBuilder.append("\"").append("sellingPirce").append("\":").append(this.sellingPirce.isPresent()?this.sellingPirce.get():null).append(",");
    stringBuilder.append("\"").append("outputTax").append("\":").append(this.outputTax.isPresent()?this.outputTax.get():null).append(",");
    stringBuilder.append("\"").append("remark").append("\":\"").append(this.remark.isPresent()?this.remark.get():null).append("\",");
    stringBuilder.append("\"").append("sourceTime").append("\":").append(this.sourceTime).append(",");
    
            stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
            stringBuilder.append("}");

          return stringBuilder.toString();
        }
      }
      