/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.purchase.request;

        import java.util.Optional;
        import com.github.dapeng.org.apache.thrift.TException;
        import com.github.dapeng.org.apache.thrift.protocol.TCompactProtocol;
        import com.github.dapeng.util.TCommonTransport;

        /**
         * Autogenerated by Dapeng-Code-Generator (2.1.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

        *
        **/
        public class AutoCalculateStockSummaryRequest{
        
            /**
            *
            **/
            public Optional<String> dateTime = Optional.empty();
            public Optional<String> getDateTime(){ return this.dateTime; }
            public void setDateTime(Optional<String> dateTime){ this.dateTime = dateTime; }

            public Optional<String> dateTime(){ return this.dateTime; }
            public AutoCalculateStockSummaryRequest dateTime(Optional<String> dateTime){ this.dateTime = dateTime; return this; }
          
            /**
            *

 是否运行盘点流水

            **/
            public Optional<Boolean> runInverntory = Optional.empty();
            public Optional<Boolean> getRunInverntory(){ return this.runInverntory; }
            public void setRunInverntory(Optional<Boolean> runInverntory){ this.runInverntory = runInverntory; }

            public Optional<Boolean> runInverntory(){ return this.runInverntory; }
            public AutoCalculateStockSummaryRequest runInverntory(Optional<Boolean> runInverntory){ this.runInverntory = runInverntory; return this; }
          
            /**
            *

 门店id

            **/
            public Optional<String> storeId = Optional.empty();
            public Optional<String> getStoreId(){ return this.storeId; }
            public void setStoreId(Optional<String> storeId){ this.storeId = storeId; }

            public Optional<String> storeId(){ return this.storeId; }
            public AutoCalculateStockSummaryRequest storeId(Optional<String> storeId){ this.storeId = storeId; return this; }
          
            /**
            *

 转闭店盘点编号

            **/
            public Optional<String> inventoryNo = Optional.empty();
            public Optional<String> getInventoryNo(){ return this.inventoryNo; }
            public void setInventoryNo(Optional<String> inventoryNo){ this.inventoryNo = inventoryNo; }

            public Optional<String> inventoryNo(){ return this.inventoryNo; }
            public AutoCalculateStockSummaryRequest inventoryNo(Optional<String> inventoryNo){ this.inventoryNo = inventoryNo; return this; }
          

        public static byte[] getBytesFromBean(AutoCalculateStockSummaryRequest bean) throws TException {
          byte[] bytes = new byte[]{};
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Write);
          TCompactProtocol protocol = new TCompactProtocol(transport);

          new com.today.api.purchase.request.serializer.AutoCalculateStockSummaryRequestSerializer().write(bean, protocol);
          transport.flush();
          return transport.getByteBuf();
        }

        public static AutoCalculateStockSummaryRequest getBeanFromBytes(byte[] bytes) throws TException {
          TCommonTransport transport = new TCommonTransport(bytes, TCommonTransport.Type.Read);
          TCompactProtocol protocol = new TCompactProtocol(transport);
          return new com.today.api.purchase.request.serializer.AutoCalculateStockSummaryRequestSerializer().read(protocol);
        }

        public String toString(){
          StringBuilder stringBuilder = new StringBuilder("{");
            stringBuilder.append("\"").append("dateTime").append("\":\"").append(this.dateTime.isPresent()?this.dateTime.get():null).append("\",");
    stringBuilder.append("\"").append("runInverntory").append("\":").append(this.runInverntory.isPresent()?this.runInverntory.get():null).append(",");
    stringBuilder.append("\"").append("storeId").append("\":\"").append(this.storeId.isPresent()?this.storeId.get():null).append("\",");
    stringBuilder.append("\"").append("inventoryNo").append("\":\"").append(this.inventoryNo.isPresent()?this.inventoryNo.get():null).append("\",");
    
            stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
            stringBuilder.append("}");

          return stringBuilder.toString();
        }
      }
      