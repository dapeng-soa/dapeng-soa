 /*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.today.api.purchase.request.serializer;
        import com.today.api.purchase.request.serializer.*;import com.today.api.common.serializer.*;import com.today.api.purchase.response.serializer.*;import com.today.api.stock.response.serializer.*;import com.today.api.stock.request.serializer.*;import com.today.api.stock.events.serializer.*;import com.today.api.stock.vo.serializer.*;

        import com.github.dapeng.core.*;
        import com.github.dapeng.org.apache.thrift.*;
        import com.github.dapeng.org.apache.thrift.protocol.*;

        import java.util.Optional;
        import java.util.concurrent.CompletableFuture;
        import java.util.concurrent.Future;

        /**
        * Autogenerated by Dapeng-Code-Generator (2.2.3)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *
        **/
        public class UpdateStockRequestSerializer implements BeanSerializer<com.today.api.purchase.request.UpdateStockRequest>{
        
      @Override
      public com.today.api.purchase.request.UpdateStockRequest read(TProtocol iprot) throws TException{

      com.today.api.purchase.request.UpdateStockRequest bean = new com.today.api.purchase.request.UpdateStockRequest();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setId(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setStockId(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setSourceType(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setSourceId(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setSourceTime(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setStockAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setFfStockAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == TType.STRING){
              java.math.BigDecimal elem0 = new java.math.BigDecimal(iprot.readString());
       bean.setAfterStockNum(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setAfterFfStockWeight(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setHandleType(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setIsDeleted(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setSellingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setBuyingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setCreatedAt(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setCreatedBy(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 16:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setUpdatedAt(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 17:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setUpdatedBy(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 18:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setRemark(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 19:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setKafkaId(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 20:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLogisticsPriceAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 21:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setStoreSellingPriceAmount(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 22:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLogisticsOutputTax(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 23:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setLogisticsPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 24:
              if(schemeField.type == TType.DOUBLE){
               double elem0 = iprot.readDouble();
       bean.setStoreSellingPrice(Optional.of(elem0));
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.today.api.purchase.request.UpdateStockRequest bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("UpdateStockRequest"));

      
            oprot.writeFieldBegin(new TField("id", TType.I64, (short) 1));
            Long elem0 = bean.getId();
            oprot.writeI64(elem0);
            
            oprot.writeFieldEnd();
          if(bean.getStockId().isPresent()){
              oprot.writeFieldBegin(new TField("stockId", TType.I64, (short) 2));
              Long elem1 = bean.getStockId().get();
              oprot.writeI64(elem1);
              
            }
            if(bean.getSourceType().isPresent()){
              oprot.writeFieldBegin(new TField("sourceType", TType.I32, (short) 3));
              Integer elem2 = bean.getSourceType().get();
              oprot.writeI32(elem2);
              
            }
            if(bean.getSourceId().isPresent()){
              oprot.writeFieldBegin(new TField("sourceId", TType.I64, (short) 4));
              Long elem3 = bean.getSourceId().get();
              oprot.writeI64(elem3);
              
            }
            if(bean.getSourceTime().isPresent()){
              oprot.writeFieldBegin(new TField("sourceTime", TType.I64, (short) 5));
              Long elem4 = bean.getSourceTime().get();
              oprot.writeI64(elem4);
              
            }
            if(bean.getStockAmount().isPresent()){
              oprot.writeFieldBegin(new TField("stockAmount", TType.STRING, (short) 6));
              java.math.BigDecimal elem5 = bean.getStockAmount().get();
              oprot.writeString(elem5.toString());
              
            }
            if(bean.getFfStockAmount().isPresent()){
              oprot.writeFieldBegin(new TField("ffStockAmount", TType.STRING, (short) 7));
              java.math.BigDecimal elem6 = bean.getFfStockAmount().get();
              oprot.writeString(elem6.toString());
              
            }
            if(bean.getAfterStockNum().isPresent()){
              oprot.writeFieldBegin(new TField("afterStockNum", TType.STRING, (short) 8));
              java.math.BigDecimal elem7 = bean.getAfterStockNum().get();
              oprot.writeString(elem7.toString());
              
            }
            if(bean.getAfterFfStockWeight().isPresent()){
              oprot.writeFieldBegin(new TField("afterFfStockWeight", TType.I32, (short) 9));
              Integer elem8 = bean.getAfterFfStockWeight().get();
              oprot.writeI32(elem8);
              
            }
            if(bean.getHandleType().isPresent()){
              oprot.writeFieldBegin(new TField("handleType", TType.I32, (short) 10));
              Integer elem9 = bean.getHandleType().get();
              oprot.writeI32(elem9);
              
            }
            if(bean.getIsDeleted().isPresent()){
              oprot.writeFieldBegin(new TField("isDeleted", TType.I32, (short) 11));
              Integer elem10 = bean.getIsDeleted().get();
              oprot.writeI32(elem10);
              
            }
            if(bean.getSellingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("sellingPrice", TType.DOUBLE, (short) 12));
              Double elem11 = bean.getSellingPrice().get();
              oprot.writeDouble(elem11);
              
            }
            if(bean.getBuyingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("buyingPrice", TType.DOUBLE, (short) 13));
              Double elem12 = bean.getBuyingPrice().get();
              oprot.writeDouble(elem12);
              
            }
            if(bean.getCreatedAt().isPresent()){
              oprot.writeFieldBegin(new TField("createdAt", TType.I64, (short) 14));
              Long elem13 = bean.getCreatedAt().get();
              oprot.writeI64(elem13);
              
            }
            if(bean.getCreatedBy().isPresent()){
              oprot.writeFieldBegin(new TField("createdBy", TType.I64, (short) 15));
              Long elem14 = bean.getCreatedBy().get();
              oprot.writeI64(elem14);
              
            }
            if(bean.getUpdatedAt().isPresent()){
              oprot.writeFieldBegin(new TField("updatedAt", TType.I64, (short) 16));
              Long elem15 = bean.getUpdatedAt().get();
              oprot.writeI64(elem15);
              
            }
            if(bean.getUpdatedBy().isPresent()){
              oprot.writeFieldBegin(new TField("updatedBy", TType.I64, (short) 17));
              Long elem16 = bean.getUpdatedBy().get();
              oprot.writeI64(elem16);
              
            }
            if(bean.getRemark().isPresent()){
              oprot.writeFieldBegin(new TField("remark", TType.STRING, (short) 18));
              String elem17 = bean.getRemark().get();
              oprot.writeString(elem17);
              
            }
            if(bean.getKafkaId().isPresent()){
              oprot.writeFieldBegin(new TField("kafkaId", TType.STRING, (short) 19));
              String elem18 = bean.getKafkaId().get();
              oprot.writeString(elem18);
              
            }
            if(bean.getLogisticsPriceAmount().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsPriceAmount", TType.DOUBLE, (short) 20));
              Double elem19 = bean.getLogisticsPriceAmount().get();
              oprot.writeDouble(elem19);
              
            }
            if(bean.getStoreSellingPriceAmount().isPresent()){
              oprot.writeFieldBegin(new TField("storeSellingPriceAmount", TType.DOUBLE, (short) 21));
              Double elem20 = bean.getStoreSellingPriceAmount().get();
              oprot.writeDouble(elem20);
              
            }
            if(bean.getLogisticsOutputTax().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsOutputTax", TType.DOUBLE, (short) 22));
              Double elem21 = bean.getLogisticsOutputTax().get();
              oprot.writeDouble(elem21);
              
            }
            if(bean.getLogisticsPrice().isPresent()){
              oprot.writeFieldBegin(new TField("logisticsPrice", TType.DOUBLE, (short) 23));
              Double elem22 = bean.getLogisticsPrice().get();
              oprot.writeDouble(elem22);
              
            }
            if(bean.getStoreSellingPrice().isPresent()){
              oprot.writeFieldBegin(new TField("storeSellingPrice", TType.DOUBLE, (short) 24));
              Double elem23 = bean.getStoreSellingPrice().get();
              oprot.writeDouble(elem23);
              
            }
            
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.today.api.purchase.request.UpdateStockRequest bean) throws TException{
      
    }
    
        @Override
        public String toString(com.today.api.purchase.request.UpdateStockRequest bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      